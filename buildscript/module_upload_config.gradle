import java.util.concurrent.TimeUnit
apply plugin: 'maven'

project.configurations.all {
    it.resolutionStrategy.cacheDynamicVersionsFor(5, TimeUnit.MINUTES)
    it.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS)
}

afterEvaluate { project ->
    // To avoid uploading the default empty jar artifact in the project root directory, we use a custom
    // configuration to specify which artifacts we want to upload.
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = GROUPID
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = version

                repository(url: mvn_android_release_url) {
                    authentication(userName: mvn_release_name, password: mvn_release_pwd)
                }
                snapshotRepository(url: mvn_android_snapshot_url) {
                    authentication(userName: mvn_snapshot_name, password: mvn_snapshot_pwd)
                }
                pom.project {
                    name = POM_NAME
                    packaging = POM_PACKAGING
                }
            }
        }
    }

    def isAndroidProject = project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library')

    if (isAndroidProject) {
        def releaseVariants = project.android.libraryVariants.findAll {
            it.buildType.name.equalsIgnoreCase('release')
        }

        task androidJavadocs(type: Javadoc, dependsOn: compileReleaseJavaWithJavac) {
            source = releaseVariants.collect { it.javaCompile.source }
            classpath = files(releaseVariants.collect { files(it.javaCompile.classpath.files,
                    project.android.bootClasspath) })

            options {
                links('http://docs.oracle.com/javase/7/docs/api/')
                linksOffline('http://d.android.com/reference', "${android.sdkDirectory}/docs/reference")
            }

            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from project.android.sourceSets.main.java.source
        }
//  不需要打jar包
//        task androidLibraryJar(type: Jar, dependsOn: compileReleaseJavaWithJavac /* == variant.javaCompile */) {
//            from compileReleaseJavaWithJavac.destinationDir
//            exclude '**/R.class'
//            exclude '**/BuildConfig.class'
//        }

        artifacts {
//            archives androidLibraryJar
            archives androidSourcesJar
//            archives androidJavadocsJar
        }
    }
}